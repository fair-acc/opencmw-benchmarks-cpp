// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestDataClass.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TestDataClass_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TestDataClass_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TestDataClass_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TestDataClass_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestDataClass_2eproto;
namespace protobuf {
class TestDataClass;
struct TestDataClassDefaultTypeInternal;
extern TestDataClassDefaultTypeInternal _TestDataClass_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::TestDataClass* Arena::CreateMaybeMessage<::protobuf::TestDataClass>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class TestDataClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.TestDataClass) */ {
 public:
  inline TestDataClass() : TestDataClass(nullptr) {}
  ~TestDataClass() override;
  explicit constexpr TestDataClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDataClass(const TestDataClass& from);
  TestDataClass(TestDataClass&& from) noexcept
    : TestDataClass() {
    *this = ::std::move(from);
  }

  inline TestDataClass& operator=(const TestDataClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDataClass& operator=(TestDataClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDataClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDataClass* internal_default_instance() {
    return reinterpret_cast<const TestDataClass*>(
               &_TestDataClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestDataClass& a, TestDataClass& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDataClass* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDataClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestDataClass* New() const final {
    return new TestDataClass();
  }

  TestDataClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestDataClass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestDataClass& from);
  void MergeFrom(const TestDataClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDataClass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.TestDataClass";
  }
  protected:
  explicit TestDataClass(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolArrayFieldNumber = 19,
    kIntArrayFieldNumber = 22,
    kLongArrayFieldNumber = 23,
    kFloatArrayFieldNumber = 24,
    kDoubleArrayFieldNumber = 25,
    kStringArrayFieldNumber = 26,
    kNDimensionsFieldNumber = 27,
    kBoolNdimArrayFieldNumber = 28,
    kIntNdimArrayFieldNumber = 31,
    kLongNdimArrayFieldNumber = 32,
    kFloatNdimArrayFieldNumber = 33,
    kDoubleNdimArrayFieldNumber = 34,
    kString1FieldNumber = 17,
    kString2FieldNumber = 18,
    kNestedDataFieldNumber = 35,
    kBool1FieldNumber = 1,
    kBool2FieldNumber = 2,
    kInt1FieldNumber = 9,
    kLong1FieldNumber = 11,
    kInt2FieldNumber = 10,
    kFloat1FieldNumber = 13,
    kLong2FieldNumber = 12,
    kDouble1FieldNumber = 15,
    kDouble2FieldNumber = 16,
    kFloat2FieldNumber = 14,
  };
  // repeated bool boolArray = 19;
  int boolarray_size() const;
  private:
  int _internal_boolarray_size() const;
  public:
  void clear_boolarray();
  private:
  bool _internal_boolarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_boolarray() const;
  void _internal_add_boolarray(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_boolarray();
  public:
  bool boolarray(int index) const;
  void set_boolarray(int index, bool value);
  void add_boolarray(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      boolarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_boolarray();

  // repeated int32 intArray = 22;
  int intarray_size() const;
  private:
  int _internal_intarray_size() const;
  public:
  void clear_intarray();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intarray() const;
  void _internal_add_intarray(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intarray();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intarray(int index) const;
  void set_intarray(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intarray(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intarray();

  // repeated int64 longArray = 23;
  int longarray_size() const;
  private:
  int _internal_longarray_size() const;
  public:
  void clear_longarray();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_longarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_longarray() const;
  void _internal_add_longarray(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_longarray();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 longarray(int index) const;
  void set_longarray(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_longarray(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      longarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_longarray();

  // repeated float floatArray = 24;
  int floatarray_size() const;
  private:
  int _internal_floatarray_size() const;
  public:
  void clear_floatarray();
  private:
  float _internal_floatarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatarray() const;
  void _internal_add_floatarray(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatarray();
  public:
  float floatarray(int index) const;
  void set_floatarray(int index, float value);
  void add_floatarray(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatarray();

  // repeated double doubleArray = 25;
  int doublearray_size() const;
  private:
  int _internal_doublearray_size() const;
  public:
  void clear_doublearray();
  private:
  double _internal_doublearray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_doublearray() const;
  void _internal_add_doublearray(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_doublearray();
  public:
  double doublearray(int index) const;
  void set_doublearray(int index, double value);
  void add_doublearray(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doublearray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doublearray();

  // repeated string stringArray = 26;
  int stringarray_size() const;
  private:
  int _internal_stringarray_size() const;
  public:
  void clear_stringarray();
  const std::string& stringarray(int index) const;
  std::string* mutable_stringarray(int index);
  void set_stringarray(int index, const std::string& value);
  void set_stringarray(int index, std::string&& value);
  void set_stringarray(int index, const char* value);
  void set_stringarray(int index, const char* value, size_t size);
  std::string* add_stringarray();
  void add_stringarray(const std::string& value);
  void add_stringarray(std::string&& value);
  void add_stringarray(const char* value);
  void add_stringarray(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stringarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stringarray();
  private:
  const std::string& _internal_stringarray(int index) const;
  std::string* _internal_add_stringarray();
  public:

  // repeated int32 nDimensions = 27;
  int ndimensions_size() const;
  private:
  int _internal_ndimensions_size() const;
  public:
  void clear_ndimensions();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ndimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ndimensions() const;
  void _internal_add_ndimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ndimensions();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ndimensions(int index) const;
  void set_ndimensions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ndimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ndimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ndimensions();

  // repeated bool boolNdimArray = 28;
  int boolndimarray_size() const;
  private:
  int _internal_boolndimarray_size() const;
  public:
  void clear_boolndimarray();
  private:
  bool _internal_boolndimarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_boolndimarray() const;
  void _internal_add_boolndimarray(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_boolndimarray();
  public:
  bool boolndimarray(int index) const;
  void set_boolndimarray(int index, bool value);
  void add_boolndimarray(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      boolndimarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_boolndimarray();

  // repeated int32 intNdimArray = 31;
  int intndimarray_size() const;
  private:
  int _internal_intndimarray_size() const;
  public:
  void clear_intndimarray();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intndimarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intndimarray() const;
  void _internal_add_intndimarray(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intndimarray();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intndimarray(int index) const;
  void set_intndimarray(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intndimarray(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intndimarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intndimarray();

  // repeated int64 longNdimArray = 32;
  int longndimarray_size() const;
  private:
  int _internal_longndimarray_size() const;
  public:
  void clear_longndimarray();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_longndimarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_longndimarray() const;
  void _internal_add_longndimarray(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_longndimarray();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 longndimarray(int index) const;
  void set_longndimarray(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_longndimarray(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      longndimarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_longndimarray();

  // repeated float floatNdimArray = 33;
  int floatndimarray_size() const;
  private:
  int _internal_floatndimarray_size() const;
  public:
  void clear_floatndimarray();
  private:
  float _internal_floatndimarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatndimarray() const;
  void _internal_add_floatndimarray(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatndimarray();
  public:
  float floatndimarray(int index) const;
  void set_floatndimarray(int index, float value);
  void add_floatndimarray(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatndimarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatndimarray();

  // repeated double doubleNdimArray = 34;
  int doublendimarray_size() const;
  private:
  int _internal_doublendimarray_size() const;
  public:
  void clear_doublendimarray();
  private:
  double _internal_doublendimarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_doublendimarray() const;
  void _internal_add_doublendimarray(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_doublendimarray();
  public:
  double doublendimarray(int index) const;
  void set_doublendimarray(int index, double value);
  void add_doublendimarray(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      doublendimarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_doublendimarray();

  // optional string string1 = 17;
  bool has_string1() const;
  private:
  bool _internal_has_string1() const;
  public:
  void clear_string1();
  const std::string& string1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string1();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_string1();
  void set_allocated_string1(std::string* string1);
  private:
  const std::string& _internal_string1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string1(const std::string& value);
  std::string* _internal_mutable_string1();
  public:

  // optional string string2 = 18;
  bool has_string2() const;
  private:
  bool _internal_has_string2() const;
  public:
  void clear_string2();
  const std::string& string2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string2();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_string2();
  void set_allocated_string2(std::string* string2);
  private:
  const std::string& _internal_string2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string2(const std::string& value);
  std::string* _internal_mutable_string2();
  public:

  // optional .protobuf.TestDataClass nestedData = 35;
  bool has_nesteddata() const;
  private:
  bool _internal_has_nesteddata() const;
  public:
  void clear_nesteddata();
  const ::protobuf::TestDataClass& nesteddata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::protobuf::TestDataClass* release_nesteddata();
  ::protobuf::TestDataClass* mutable_nesteddata();
  void set_allocated_nesteddata(::protobuf::TestDataClass* nesteddata);
  private:
  const ::protobuf::TestDataClass& _internal_nesteddata() const;
  ::protobuf::TestDataClass* _internal_mutable_nesteddata();
  public:
  void unsafe_arena_set_allocated_nesteddata(
      ::protobuf::TestDataClass* nesteddata);
  ::protobuf::TestDataClass* unsafe_arena_release_nesteddata();

  // optional bool bool1 = 1;
  bool has_bool1() const;
  private:
  bool _internal_has_bool1() const;
  public:
  void clear_bool1();
  bool bool1() const;
  void set_bool1(bool value);
  private:
  bool _internal_bool1() const;
  void _internal_set_bool1(bool value);
  public:

  // optional bool bool2 = 2;
  bool has_bool2() const;
  private:
  bool _internal_has_bool2() const;
  public:
  void clear_bool2();
  bool bool2() const;
  void set_bool2(bool value);
  private:
  bool _internal_bool2() const;
  void _internal_set_bool2(bool value);
  public:

  // optional int32 int1 = 9;
  bool has_int1() const;
  private:
  bool _internal_has_int1() const;
  public:
  void clear_int1();
  ::PROTOBUF_NAMESPACE_ID::int32 int1() const;
  void set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int1() const;
  void _internal_set_int1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 long1 = 11;
  bool has_long1() const;
  private:
  bool _internal_has_long1() const;
  public:
  void clear_long1();
  ::PROTOBUF_NAMESPACE_ID::int64 long1() const;
  void set_long1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long1() const;
  void _internal_set_long1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 int2 = 10;
  bool has_int2() const;
  private:
  bool _internal_has_int2() const;
  public:
  void clear_int2();
  ::PROTOBUF_NAMESPACE_ID::int32 int2() const;
  void set_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int2() const;
  void _internal_set_int2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float float1 = 13;
  bool has_float1() const;
  private:
  bool _internal_has_float1() const;
  public:
  void clear_float1();
  float float1() const;
  void set_float1(float value);
  private:
  float _internal_float1() const;
  void _internal_set_float1(float value);
  public:

  // optional int64 long2 = 12;
  bool has_long2() const;
  private:
  bool _internal_has_long2() const;
  public:
  void clear_long2();
  ::PROTOBUF_NAMESPACE_ID::int64 long2() const;
  void set_long2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long2() const;
  void _internal_set_long2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double double1 = 15;
  bool has_double1() const;
  private:
  bool _internal_has_double1() const;
  public:
  void clear_double1();
  double double1() const;
  void set_double1(double value);
  private:
  double _internal_double1() const;
  void _internal_set_double1(double value);
  public:

  // optional double double2 = 16;
  bool has_double2() const;
  private:
  bool _internal_has_double2() const;
  public:
  void clear_double2();
  double double2() const;
  void set_double2(double value);
  private:
  double _internal_double2() const;
  void _internal_set_double2(double value);
  public:

  // optional float float2 = 14;
  bool has_float2() const;
  private:
  bool _internal_has_float2() const;
  public:
  void clear_float2();
  float float2() const;
  void set_float2(float value);
  private:
  float _internal_float2() const;
  void _internal_set_float2(float value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.TestDataClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > boolarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intarray_;
  mutable std::atomic<int> _intarray_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > longarray_;
  mutable std::atomic<int> _longarray_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doublearray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stringarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ndimensions_;
  mutable std::atomic<int> _ndimensions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > boolndimarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intndimarray_;
  mutable std::atomic<int> _intndimarray_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > longndimarray_;
  mutable std::atomic<int> _longndimarray_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatndimarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > doublendimarray_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string2_;
  ::protobuf::TestDataClass* nesteddata_;
  bool bool1_;
  bool bool2_;
  ::PROTOBUF_NAMESPACE_ID::int32 int1_;
  ::PROTOBUF_NAMESPACE_ID::int64 long1_;
  ::PROTOBUF_NAMESPACE_ID::int32 int2_;
  float float1_;
  ::PROTOBUF_NAMESPACE_ID::int64 long2_;
  double double1_;
  double double2_;
  float float2_;
  friend struct ::TableStruct_TestDataClass_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestDataClass

// optional bool bool1 = 1;
inline bool TestDataClass::_internal_has_bool1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestDataClass::has_bool1() const {
  return _internal_has_bool1();
}
inline void TestDataClass::clear_bool1() {
  bool1_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TestDataClass::_internal_bool1() const {
  return bool1_;
}
inline bool TestDataClass::bool1() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.bool1)
  return _internal_bool1();
}
inline void TestDataClass::_internal_set_bool1(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bool1_ = value;
}
inline void TestDataClass::set_bool1(bool value) {
  _internal_set_bool1(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.bool1)
}

// optional bool bool2 = 2;
inline bool TestDataClass::_internal_has_bool2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestDataClass::has_bool2() const {
  return _internal_has_bool2();
}
inline void TestDataClass::clear_bool2() {
  bool2_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TestDataClass::_internal_bool2() const {
  return bool2_;
}
inline bool TestDataClass::bool2() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.bool2)
  return _internal_bool2();
}
inline void TestDataClass::_internal_set_bool2(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bool2_ = value;
}
inline void TestDataClass::set_bool2(bool value) {
  _internal_set_bool2(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.bool2)
}

// optional int32 int1 = 9;
inline bool TestDataClass::_internal_has_int1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestDataClass::has_int1() const {
  return _internal_has_int1();
}
inline void TestDataClass::clear_int1() {
  int1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::_internal_int1() const {
  return int1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::int1() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.int1)
  return _internal_int1();
}
inline void TestDataClass::_internal_set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  int1_ = value;
}
inline void TestDataClass::set_int1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int1(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.int1)
}

// optional int32 int2 = 10;
inline bool TestDataClass::_internal_has_int2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestDataClass::has_int2() const {
  return _internal_has_int2();
}
inline void TestDataClass::clear_int2() {
  int2_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::_internal_int2() const {
  return int2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::int2() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.int2)
  return _internal_int2();
}
inline void TestDataClass::_internal_set_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  int2_ = value;
}
inline void TestDataClass::set_int2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int2(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.int2)
}

// optional int64 long1 = 11;
inline bool TestDataClass::_internal_has_long1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestDataClass::has_long1() const {
  return _internal_has_long1();
}
inline void TestDataClass::clear_long1() {
  long1_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::_internal_long1() const {
  return long1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::long1() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.long1)
  return _internal_long1();
}
inline void TestDataClass::_internal_set_long1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  long1_ = value;
}
inline void TestDataClass::set_long1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long1(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.long1)
}

// optional int64 long2 = 12;
inline bool TestDataClass::_internal_has_long2() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestDataClass::has_long2() const {
  return _internal_has_long2();
}
inline void TestDataClass::clear_long2() {
  long2_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::_internal_long2() const {
  return long2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::long2() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.long2)
  return _internal_long2();
}
inline void TestDataClass::_internal_set_long2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  long2_ = value;
}
inline void TestDataClass::set_long2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long2(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.long2)
}

// optional float float1 = 13;
inline bool TestDataClass::_internal_has_float1() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestDataClass::has_float1() const {
  return _internal_has_float1();
}
inline void TestDataClass::clear_float1() {
  float1_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TestDataClass::_internal_float1() const {
  return float1_;
}
inline float TestDataClass::float1() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.float1)
  return _internal_float1();
}
inline void TestDataClass::_internal_set_float1(float value) {
  _has_bits_[0] |= 0x00000100u;
  float1_ = value;
}
inline void TestDataClass::set_float1(float value) {
  _internal_set_float1(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.float1)
}

// optional float float2 = 14;
inline bool TestDataClass::_internal_has_float2() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestDataClass::has_float2() const {
  return _internal_has_float2();
}
inline void TestDataClass::clear_float2() {
  float2_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TestDataClass::_internal_float2() const {
  return float2_;
}
inline float TestDataClass::float2() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.float2)
  return _internal_float2();
}
inline void TestDataClass::_internal_set_float2(float value) {
  _has_bits_[0] |= 0x00001000u;
  float2_ = value;
}
inline void TestDataClass::set_float2(float value) {
  _internal_set_float2(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.float2)
}

// optional double double1 = 15;
inline bool TestDataClass::_internal_has_double1() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestDataClass::has_double1() const {
  return _internal_has_double1();
}
inline void TestDataClass::clear_double1() {
  double1_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double TestDataClass::_internal_double1() const {
  return double1_;
}
inline double TestDataClass::double1() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.double1)
  return _internal_double1();
}
inline void TestDataClass::_internal_set_double1(double value) {
  _has_bits_[0] |= 0x00000400u;
  double1_ = value;
}
inline void TestDataClass::set_double1(double value) {
  _internal_set_double1(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.double1)
}

// optional double double2 = 16;
inline bool TestDataClass::_internal_has_double2() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestDataClass::has_double2() const {
  return _internal_has_double2();
}
inline void TestDataClass::clear_double2() {
  double2_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double TestDataClass::_internal_double2() const {
  return double2_;
}
inline double TestDataClass::double2() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.double2)
  return _internal_double2();
}
inline void TestDataClass::_internal_set_double2(double value) {
  _has_bits_[0] |= 0x00000800u;
  double2_ = value;
}
inline void TestDataClass::set_double2(double value) {
  _internal_set_double2(value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.double2)
}

// optional string string1 = 17;
inline bool TestDataClass::_internal_has_string1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDataClass::has_string1() const {
  return _internal_has_string1();
}
inline void TestDataClass::clear_string1() {
  string1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestDataClass::string1() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.string1)
  return _internal_string1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestDataClass::set_string1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.string1)
}
inline std::string* TestDataClass::mutable_string1() {
  // @@protoc_insertion_point(field_mutable:protobuf.TestDataClass.string1)
  return _internal_mutable_string1();
}
inline const std::string& TestDataClass::_internal_string1() const {
  return string1_.Get();
}
inline void TestDataClass::_internal_set_string1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestDataClass::_internal_mutable_string1() {
  _has_bits_[0] |= 0x00000001u;
  return string1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestDataClass::release_string1() {
  // @@protoc_insertion_point(field_release:protobuf.TestDataClass.string1)
  if (!_internal_has_string1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestDataClass::set_allocated_string1(std::string* string1) {
  if (string1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf.TestDataClass.string1)
}

// optional string string2 = 18;
inline bool TestDataClass::_internal_has_string2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestDataClass::has_string2() const {
  return _internal_has_string2();
}
inline void TestDataClass::clear_string2() {
  string2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestDataClass::string2() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.string2)
  return _internal_string2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestDataClass::set_string2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 string2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.string2)
}
inline std::string* TestDataClass::mutable_string2() {
  // @@protoc_insertion_point(field_mutable:protobuf.TestDataClass.string2)
  return _internal_mutable_string2();
}
inline const std::string& TestDataClass::_internal_string2() const {
  return string2_.Get();
}
inline void TestDataClass::_internal_set_string2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TestDataClass::_internal_mutable_string2() {
  _has_bits_[0] |= 0x00000002u;
  return string2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TestDataClass::release_string2() {
  // @@protoc_insertion_point(field_release:protobuf.TestDataClass.string2)
  if (!_internal_has_string2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TestDataClass::set_allocated_string2(std::string* string2) {
  if (string2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf.TestDataClass.string2)
}

// repeated bool boolArray = 19;
inline int TestDataClass::_internal_boolarray_size() const {
  return boolarray_.size();
}
inline int TestDataClass::boolarray_size() const {
  return _internal_boolarray_size();
}
inline void TestDataClass::clear_boolarray() {
  boolarray_.Clear();
}
inline bool TestDataClass::_internal_boolarray(int index) const {
  return boolarray_.Get(index);
}
inline bool TestDataClass::boolarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.boolArray)
  return _internal_boolarray(index);
}
inline void TestDataClass::set_boolarray(int index, bool value) {
  boolarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.boolArray)
}
inline void TestDataClass::_internal_add_boolarray(bool value) {
  boolarray_.Add(value);
}
inline void TestDataClass::add_boolarray(bool value) {
  _internal_add_boolarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.boolArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestDataClass::_internal_boolarray() const {
  return boolarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestDataClass::boolarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.boolArray)
  return _internal_boolarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestDataClass::_internal_mutable_boolarray() {
  return &boolarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestDataClass::mutable_boolarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.boolArray)
  return _internal_mutable_boolarray();
}

// repeated int32 intArray = 22;
inline int TestDataClass::_internal_intarray_size() const {
  return intarray_.size();
}
inline int TestDataClass::intarray_size() const {
  return _internal_intarray_size();
}
inline void TestDataClass::clear_intarray() {
  intarray_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::_internal_intarray(int index) const {
  return intarray_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::intarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.intArray)
  return _internal_intarray(index);
}
inline void TestDataClass::set_intarray(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.intArray)
}
inline void TestDataClass::_internal_add_intarray(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intarray_.Add(value);
}
inline void TestDataClass::add_intarray(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.intArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestDataClass::_internal_intarray() const {
  return intarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestDataClass::intarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.intArray)
  return _internal_intarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestDataClass::_internal_mutable_intarray() {
  return &intarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestDataClass::mutable_intarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.intArray)
  return _internal_mutable_intarray();
}

// repeated int64 longArray = 23;
inline int TestDataClass::_internal_longarray_size() const {
  return longarray_.size();
}
inline int TestDataClass::longarray_size() const {
  return _internal_longarray_size();
}
inline void TestDataClass::clear_longarray() {
  longarray_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::_internal_longarray(int index) const {
  return longarray_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::longarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.longArray)
  return _internal_longarray(index);
}
inline void TestDataClass::set_longarray(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  longarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.longArray)
}
inline void TestDataClass::_internal_add_longarray(::PROTOBUF_NAMESPACE_ID::int64 value) {
  longarray_.Add(value);
}
inline void TestDataClass::add_longarray(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_longarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.longArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestDataClass::_internal_longarray() const {
  return longarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestDataClass::longarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.longArray)
  return _internal_longarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestDataClass::_internal_mutable_longarray() {
  return &longarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestDataClass::mutable_longarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.longArray)
  return _internal_mutable_longarray();
}

// repeated float floatArray = 24;
inline int TestDataClass::_internal_floatarray_size() const {
  return floatarray_.size();
}
inline int TestDataClass::floatarray_size() const {
  return _internal_floatarray_size();
}
inline void TestDataClass::clear_floatarray() {
  floatarray_.Clear();
}
inline float TestDataClass::_internal_floatarray(int index) const {
  return floatarray_.Get(index);
}
inline float TestDataClass::floatarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.floatArray)
  return _internal_floatarray(index);
}
inline void TestDataClass::set_floatarray(int index, float value) {
  floatarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.floatArray)
}
inline void TestDataClass::_internal_add_floatarray(float value) {
  floatarray_.Add(value);
}
inline void TestDataClass::add_floatarray(float value) {
  _internal_add_floatarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.floatArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestDataClass::_internal_floatarray() const {
  return floatarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestDataClass::floatarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.floatArray)
  return _internal_floatarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestDataClass::_internal_mutable_floatarray() {
  return &floatarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestDataClass::mutable_floatarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.floatArray)
  return _internal_mutable_floatarray();
}

// repeated double doubleArray = 25;
inline int TestDataClass::_internal_doublearray_size() const {
  return doublearray_.size();
}
inline int TestDataClass::doublearray_size() const {
  return _internal_doublearray_size();
}
inline void TestDataClass::clear_doublearray() {
  doublearray_.Clear();
}
inline double TestDataClass::_internal_doublearray(int index) const {
  return doublearray_.Get(index);
}
inline double TestDataClass::doublearray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.doubleArray)
  return _internal_doublearray(index);
}
inline void TestDataClass::set_doublearray(int index, double value) {
  doublearray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.doubleArray)
}
inline void TestDataClass::_internal_add_doublearray(double value) {
  doublearray_.Add(value);
}
inline void TestDataClass::add_doublearray(double value) {
  _internal_add_doublearray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.doubleArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestDataClass::_internal_doublearray() const {
  return doublearray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestDataClass::doublearray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.doubleArray)
  return _internal_doublearray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestDataClass::_internal_mutable_doublearray() {
  return &doublearray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestDataClass::mutable_doublearray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.doubleArray)
  return _internal_mutable_doublearray();
}

// repeated string stringArray = 26;
inline int TestDataClass::_internal_stringarray_size() const {
  return stringarray_.size();
}
inline int TestDataClass::stringarray_size() const {
  return _internal_stringarray_size();
}
inline void TestDataClass::clear_stringarray() {
  stringarray_.Clear();
}
inline std::string* TestDataClass::add_stringarray() {
  // @@protoc_insertion_point(field_add_mutable:protobuf.TestDataClass.stringArray)
  return _internal_add_stringarray();
}
inline const std::string& TestDataClass::_internal_stringarray(int index) const {
  return stringarray_.Get(index);
}
inline const std::string& TestDataClass::stringarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.stringArray)
  return _internal_stringarray(index);
}
inline std::string* TestDataClass::mutable_stringarray(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.TestDataClass.stringArray)
  return stringarray_.Mutable(index);
}
inline void TestDataClass::set_stringarray(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.stringArray)
  stringarray_.Mutable(index)->assign(value);
}
inline void TestDataClass::set_stringarray(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.stringArray)
  stringarray_.Mutable(index)->assign(std::move(value));
}
inline void TestDataClass::set_stringarray(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringarray_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.TestDataClass.stringArray)
}
inline void TestDataClass::set_stringarray(int index, const char* value, size_t size) {
  stringarray_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.TestDataClass.stringArray)
}
inline std::string* TestDataClass::_internal_add_stringarray() {
  return stringarray_.Add();
}
inline void TestDataClass::add_stringarray(const std::string& value) {
  stringarray_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.stringArray)
}
inline void TestDataClass::add_stringarray(std::string&& value) {
  stringarray_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.stringArray)
}
inline void TestDataClass::add_stringarray(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stringarray_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf.TestDataClass.stringArray)
}
inline void TestDataClass::add_stringarray(const char* value, size_t size) {
  stringarray_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf.TestDataClass.stringArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestDataClass::stringarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.stringArray)
  return stringarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestDataClass::mutable_stringarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.stringArray)
  return &stringarray_;
}

// repeated int32 nDimensions = 27;
inline int TestDataClass::_internal_ndimensions_size() const {
  return ndimensions_.size();
}
inline int TestDataClass::ndimensions_size() const {
  return _internal_ndimensions_size();
}
inline void TestDataClass::clear_ndimensions() {
  ndimensions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::_internal_ndimensions(int index) const {
  return ndimensions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::ndimensions(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.nDimensions)
  return _internal_ndimensions(index);
}
inline void TestDataClass::set_ndimensions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ndimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.nDimensions)
}
inline void TestDataClass::_internal_add_ndimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ndimensions_.Add(value);
}
inline void TestDataClass::add_ndimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ndimensions(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.nDimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestDataClass::_internal_ndimensions() const {
  return ndimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestDataClass::ndimensions() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.nDimensions)
  return _internal_ndimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestDataClass::_internal_mutable_ndimensions() {
  return &ndimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestDataClass::mutable_ndimensions() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.nDimensions)
  return _internal_mutable_ndimensions();
}

// repeated bool boolNdimArray = 28;
inline int TestDataClass::_internal_boolndimarray_size() const {
  return boolndimarray_.size();
}
inline int TestDataClass::boolndimarray_size() const {
  return _internal_boolndimarray_size();
}
inline void TestDataClass::clear_boolndimarray() {
  boolndimarray_.Clear();
}
inline bool TestDataClass::_internal_boolndimarray(int index) const {
  return boolndimarray_.Get(index);
}
inline bool TestDataClass::boolndimarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.boolNdimArray)
  return _internal_boolndimarray(index);
}
inline void TestDataClass::set_boolndimarray(int index, bool value) {
  boolndimarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.boolNdimArray)
}
inline void TestDataClass::_internal_add_boolndimarray(bool value) {
  boolndimarray_.Add(value);
}
inline void TestDataClass::add_boolndimarray(bool value) {
  _internal_add_boolndimarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.boolNdimArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestDataClass::_internal_boolndimarray() const {
  return boolndimarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestDataClass::boolndimarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.boolNdimArray)
  return _internal_boolndimarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestDataClass::_internal_mutable_boolndimarray() {
  return &boolndimarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestDataClass::mutable_boolndimarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.boolNdimArray)
  return _internal_mutable_boolndimarray();
}

// repeated int32 intNdimArray = 31;
inline int TestDataClass::_internal_intndimarray_size() const {
  return intndimarray_.size();
}
inline int TestDataClass::intndimarray_size() const {
  return _internal_intndimarray_size();
}
inline void TestDataClass::clear_intndimarray() {
  intndimarray_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::_internal_intndimarray(int index) const {
  return intndimarray_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDataClass::intndimarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.intNdimArray)
  return _internal_intndimarray(index);
}
inline void TestDataClass::set_intndimarray(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intndimarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.intNdimArray)
}
inline void TestDataClass::_internal_add_intndimarray(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intndimarray_.Add(value);
}
inline void TestDataClass::add_intndimarray(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intndimarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.intNdimArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestDataClass::_internal_intndimarray() const {
  return intndimarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestDataClass::intndimarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.intNdimArray)
  return _internal_intndimarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestDataClass::_internal_mutable_intndimarray() {
  return &intndimarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestDataClass::mutable_intndimarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.intNdimArray)
  return _internal_mutable_intndimarray();
}

// repeated int64 longNdimArray = 32;
inline int TestDataClass::_internal_longndimarray_size() const {
  return longndimarray_.size();
}
inline int TestDataClass::longndimarray_size() const {
  return _internal_longndimarray_size();
}
inline void TestDataClass::clear_longndimarray() {
  longndimarray_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::_internal_longndimarray(int index) const {
  return longndimarray_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestDataClass::longndimarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.longNdimArray)
  return _internal_longndimarray(index);
}
inline void TestDataClass::set_longndimarray(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  longndimarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.longNdimArray)
}
inline void TestDataClass::_internal_add_longndimarray(::PROTOBUF_NAMESPACE_ID::int64 value) {
  longndimarray_.Add(value);
}
inline void TestDataClass::add_longndimarray(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_longndimarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.longNdimArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestDataClass::_internal_longndimarray() const {
  return longndimarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestDataClass::longndimarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.longNdimArray)
  return _internal_longndimarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestDataClass::_internal_mutable_longndimarray() {
  return &longndimarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestDataClass::mutable_longndimarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.longNdimArray)
  return _internal_mutable_longndimarray();
}

// repeated float floatNdimArray = 33;
inline int TestDataClass::_internal_floatndimarray_size() const {
  return floatndimarray_.size();
}
inline int TestDataClass::floatndimarray_size() const {
  return _internal_floatndimarray_size();
}
inline void TestDataClass::clear_floatndimarray() {
  floatndimarray_.Clear();
}
inline float TestDataClass::_internal_floatndimarray(int index) const {
  return floatndimarray_.Get(index);
}
inline float TestDataClass::floatndimarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.floatNdimArray)
  return _internal_floatndimarray(index);
}
inline void TestDataClass::set_floatndimarray(int index, float value) {
  floatndimarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.floatNdimArray)
}
inline void TestDataClass::_internal_add_floatndimarray(float value) {
  floatndimarray_.Add(value);
}
inline void TestDataClass::add_floatndimarray(float value) {
  _internal_add_floatndimarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.floatNdimArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestDataClass::_internal_floatndimarray() const {
  return floatndimarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestDataClass::floatndimarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.floatNdimArray)
  return _internal_floatndimarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestDataClass::_internal_mutable_floatndimarray() {
  return &floatndimarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestDataClass::mutable_floatndimarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.floatNdimArray)
  return _internal_mutable_floatndimarray();
}

// repeated double doubleNdimArray = 34;
inline int TestDataClass::_internal_doublendimarray_size() const {
  return doublendimarray_.size();
}
inline int TestDataClass::doublendimarray_size() const {
  return _internal_doublendimarray_size();
}
inline void TestDataClass::clear_doublendimarray() {
  doublendimarray_.Clear();
}
inline double TestDataClass::_internal_doublendimarray(int index) const {
  return doublendimarray_.Get(index);
}
inline double TestDataClass::doublendimarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.doubleNdimArray)
  return _internal_doublendimarray(index);
}
inline void TestDataClass::set_doublendimarray(int index, double value) {
  doublendimarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.TestDataClass.doubleNdimArray)
}
inline void TestDataClass::_internal_add_doublendimarray(double value) {
  doublendimarray_.Add(value);
}
inline void TestDataClass::add_doublendimarray(double value) {
  _internal_add_doublendimarray(value);
  // @@protoc_insertion_point(field_add:protobuf.TestDataClass.doubleNdimArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestDataClass::_internal_doublendimarray() const {
  return doublendimarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestDataClass::doublendimarray() const {
  // @@protoc_insertion_point(field_list:protobuf.TestDataClass.doubleNdimArray)
  return _internal_doublendimarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestDataClass::_internal_mutable_doublendimarray() {
  return &doublendimarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestDataClass::mutable_doublendimarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.TestDataClass.doubleNdimArray)
  return _internal_mutable_doublendimarray();
}

// optional .protobuf.TestDataClass nestedData = 35;
inline bool TestDataClass::_internal_has_nesteddata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || nesteddata_ != nullptr);
  return value;
}
inline bool TestDataClass::has_nesteddata() const {
  return _internal_has_nesteddata();
}
inline void TestDataClass::clear_nesteddata() {
  if (nesteddata_ != nullptr) nesteddata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf::TestDataClass& TestDataClass::_internal_nesteddata() const {
  const ::protobuf::TestDataClass* p = nesteddata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::TestDataClass&>(
      ::protobuf::_TestDataClass_default_instance_);
}
inline const ::protobuf::TestDataClass& TestDataClass::nesteddata() const {
  // @@protoc_insertion_point(field_get:protobuf.TestDataClass.nestedData)
  return _internal_nesteddata();
}
inline void TestDataClass::unsafe_arena_set_allocated_nesteddata(
    ::protobuf::TestDataClass* nesteddata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nesteddata_);
  }
  nesteddata_ = nesteddata;
  if (nesteddata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.TestDataClass.nestedData)
}
inline ::protobuf::TestDataClass* TestDataClass::release_nesteddata() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf::TestDataClass* temp = nesteddata_;
  nesteddata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::TestDataClass* TestDataClass::unsafe_arena_release_nesteddata() {
  // @@protoc_insertion_point(field_release:protobuf.TestDataClass.nestedData)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf::TestDataClass* temp = nesteddata_;
  nesteddata_ = nullptr;
  return temp;
}
inline ::protobuf::TestDataClass* TestDataClass::_internal_mutable_nesteddata() {
  _has_bits_[0] |= 0x00000004u;
  if (nesteddata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::TestDataClass>(GetArenaForAllocation());
    nesteddata_ = p;
  }
  return nesteddata_;
}
inline ::protobuf::TestDataClass* TestDataClass::mutable_nesteddata() {
  // @@protoc_insertion_point(field_mutable:protobuf.TestDataClass.nestedData)
  return _internal_mutable_nesteddata();
}
inline void TestDataClass::set_allocated_nesteddata(::protobuf::TestDataClass* nesteddata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nesteddata_;
  }
  if (nesteddata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protobuf::TestDataClass>::GetOwningArena(nesteddata);
    if (message_arena != submessage_arena) {
      nesteddata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nesteddata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  nesteddata_ = nesteddata;
  // @@protoc_insertion_point(field_set_allocated:protobuf.TestDataClass.nestedData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TestDataClass_2eproto
