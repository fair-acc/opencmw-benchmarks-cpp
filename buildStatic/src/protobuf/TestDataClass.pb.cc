// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestDataClass.proto

#include "TestDataClass.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protobuf {
constexpr TestDataClass::TestDataClass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boolarray_()
  , intarray_()
  , _intarray_cached_byte_size_()
  , longarray_()
  , _longarray_cached_byte_size_()
  , floatarray_()
  , doublearray_()
  , stringarray_()
  , ndimensions_()
  , _ndimensions_cached_byte_size_()
  , boolndimarray_()
  , intndimarray_()
  , _intndimarray_cached_byte_size_()
  , longndimarray_()
  , _longndimarray_cached_byte_size_()
  , floatndimarray_()
  , doublendimarray_()
  , string1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , string2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nesteddata_(nullptr)
  , bool1_(false)
  , bool2_(false)
  , int1_(0)
  , long1_(int64_t{0})
  , int2_(0)
  , float1_(0)
  , long2_(int64_t{0})
  , double1_(0)
  , double2_(0)
  , float2_(0){}
struct TestDataClassDefaultTypeInternal {
  constexpr TestDataClassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestDataClassDefaultTypeInternal() {}
  union {
    TestDataClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestDataClassDefaultTypeInternal _TestDataClass_default_instance_;
}  // namespace protobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TestDataClass_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TestDataClass_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TestDataClass_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TestDataClass_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, bool1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, bool2_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, int1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, int2_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, long1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, long2_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, float1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, float2_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, double1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, double2_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, string1_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, string2_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, boolarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, intarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, longarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, floatarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, doublearray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, stringarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, ndimensions_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, boolndimarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, intndimarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, longndimarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, floatndimarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, doublendimarray_),
  PROTOBUF_FIELD_OFFSET(::protobuf::TestDataClass, nesteddata_),
  3,
  4,
  5,
  7,
  6,
  9,
  8,
  12,
  10,
  11,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(::protobuf::TestDataClass)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_TestDataClass_default_instance_),
};

const char descriptor_table_protodef_TestDataClass_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023TestDataClass.proto\022\010protobuf\"\310\005\n\rTest"
  "DataClass\022\022\n\005bool1\030\001 \001(\010H\000\210\001\001\022\022\n\005bool2\030\002"
  " \001(\010H\001\210\001\001\022\021\n\004int1\030\t \001(\005H\002\210\001\001\022\021\n\004int2\030\n \001"
  "(\005H\003\210\001\001\022\022\n\005long1\030\013 \001(\003H\004\210\001\001\022\022\n\005long2\030\014 \001"
  "(\003H\005\210\001\001\022\023\n\006float1\030\r \001(\002H\006\210\001\001\022\023\n\006float2\030\016"
  " \001(\002H\007\210\001\001\022\024\n\007double1\030\017 \001(\001H\010\210\001\001\022\024\n\007doubl"
  "e2\030\020 \001(\001H\t\210\001\001\022\024\n\007string1\030\021 \001(\tH\n\210\001\001\022\024\n\007s"
  "tring2\030\022 \001(\tH\013\210\001\001\022\021\n\tboolArray\030\023 \003(\010\022\020\n\010"
  "intArray\030\026 \003(\005\022\021\n\tlongArray\030\027 \003(\003\022\022\n\nflo"
  "atArray\030\030 \003(\002\022\023\n\013doubleArray\030\031 \003(\001\022\023\n\013st"
  "ringArray\030\032 \003(\t\022\023\n\013nDimensions\030\033 \003(\005\022\025\n\r"
  "boolNdimArray\030\034 \003(\010\022\024\n\014intNdimArray\030\037 \003("
  "\005\022\025\n\rlongNdimArray\030  \003(\003\022\026\n\016floatNdimArr"
  "ay\030! \003(\002\022\027\n\017doubleNdimArray\030\" \003(\001\0220\n\nnes"
  "tedData\030# \001(\0132\027.protobuf.TestDataClassH\014"
  "\210\001\001B\010\n\006_bool1B\010\n\006_bool2B\007\n\005_int1B\007\n\005_int"
  "2B\010\n\006_long1B\010\n\006_long2B\t\n\007_float1B\t\n\007_flo"
  "at2B\n\n\010_double1B\n\n\010_double2B\n\n\010_string1B"
  "\n\n\010_string2B\r\n\013_nestedDatab\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TestDataClass_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestDataClass_2eproto = {
  false, false, 754, descriptor_table_protodef_TestDataClass_2eproto, "TestDataClass.proto", 
  &descriptor_table_TestDataClass_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_TestDataClass_2eproto::offsets,
  file_level_metadata_TestDataClass_2eproto, file_level_enum_descriptors_TestDataClass_2eproto, file_level_service_descriptors_TestDataClass_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TestDataClass_2eproto_getter() {
  return &descriptor_table_TestDataClass_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TestDataClass_2eproto(&descriptor_table_TestDataClass_2eproto);
namespace protobuf {

// ===================================================================

class TestDataClass::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDataClass>()._has_bits_);
  static void set_has_bool1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bool2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_int1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_int2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_long1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_long2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_float1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_float2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_double1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_double2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_string1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_string2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf::TestDataClass& nesteddata(const TestDataClass* msg);
  static void set_has_nesteddata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf::TestDataClass&
TestDataClass::_Internal::nesteddata(const TestDataClass* msg) {
  return *msg->nesteddata_;
}
TestDataClass::TestDataClass(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boolarray_(arena),
  intarray_(arena),
  longarray_(arena),
  floatarray_(arena),
  doublearray_(arena),
  stringarray_(arena),
  ndimensions_(arena),
  boolndimarray_(arena),
  intndimarray_(arena),
  longndimarray_(arena),
  floatndimarray_(arena),
  doublendimarray_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.TestDataClass)
}
TestDataClass::TestDataClass(const TestDataClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      boolarray_(from.boolarray_),
      intarray_(from.intarray_),
      longarray_(from.longarray_),
      floatarray_(from.floatarray_),
      doublearray_(from.doublearray_),
      stringarray_(from.stringarray_),
      ndimensions_(from.ndimensions_),
      boolndimarray_(from.boolndimarray_),
      intndimarray_(from.intndimarray_),
      longndimarray_(from.longndimarray_),
      floatndimarray_(from.floatndimarray_),
      doublendimarray_(from.doublendimarray_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string1()) {
    string1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string1(), 
      GetArenaForAllocation());
  }
  string2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string2()) {
    string2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string2(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_nesteddata()) {
    nesteddata_ = new ::protobuf::TestDataClass(*from.nesteddata_);
  } else {
    nesteddata_ = nullptr;
  }
  ::memcpy(&bool1_, &from.bool1_,
    static_cast<size_t>(reinterpret_cast<char*>(&float2_) -
    reinterpret_cast<char*>(&bool1_)) + sizeof(float2_));
  // @@protoc_insertion_point(copy_constructor:protobuf.TestDataClass)
}

void TestDataClass::SharedCtor() {
string1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
string2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nesteddata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&float2_) -
    reinterpret_cast<char*>(&nesteddata_)) + sizeof(float2_));
}

TestDataClass::~TestDataClass() {
  // @@protoc_insertion_point(destructor:protobuf.TestDataClass)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestDataClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nesteddata_;
}

void TestDataClass::ArenaDtor(void* object) {
  TestDataClass* _this = reinterpret_cast< TestDataClass* >(object);
  (void)_this;
}
void TestDataClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDataClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDataClass::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.TestDataClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boolarray_.Clear();
  intarray_.Clear();
  longarray_.Clear();
  floatarray_.Clear();
  doublearray_.Clear();
  stringarray_.Clear();
  ndimensions_.Clear();
  boolndimarray_.Clear();
  intndimarray_.Clear();
  longndimarray_.Clear();
  floatndimarray_.Clear();
  doublendimarray_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      string1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      string2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nesteddata_ != nullptr);
      nesteddata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&bool1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int2_) -
        reinterpret_cast<char*>(&bool1_)) + sizeof(int2_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&float1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float2_) -
        reinterpret_cast<char*>(&float1_)) + sizeof(float2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDataClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bool1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bool1(&has_bits);
          bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bool2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bool2(&has_bits);
          bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_int1(&has_bits);
          int1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_int2(&has_bits);
          int2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 long1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_long1(&has_bits);
          long1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 long2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_long2(&has_bits);
          long2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float float1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_float1(&has_bits);
          float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float float2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_float2(&has_bits);
          float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double double1 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_double1(&has_bits);
          double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double double2 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_double2(&has_bits);
          double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string string1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_string1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.TestDataClass.string1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_string2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.TestDataClass.string2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool boolArray = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_boolarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_boolarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intArray = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176) {
          _internal_add_intarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 longArray = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_longarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_longarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float floatArray = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197) {
          _internal_add_floatarray(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double doubleArray = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doublearray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201) {
          _internal_add_doublearray(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string stringArray = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_stringarray();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.TestDataClass.stringArray"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 nDimensions = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ndimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_ndimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool boolNdimArray = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_boolndimarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_boolndimarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intNdimArray = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intndimarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_intndimarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 longNdimArray = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_longndimarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0) {
          _internal_add_longndimarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float floatNdimArray = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatndimarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_floatndimarray(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double doubleNdimArray = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_doublendimarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_doublendimarray(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .protobuf.TestDataClass nestedData = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nesteddata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestDataClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.TestDataClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool bool1 = 1;
  if (_internal_has_bool1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool1(), target);
  }

  // optional bool bool2 = 2;
  if (_internal_has_bool2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bool2(), target);
  }

  // optional int32 int1 = 9;
  if (_internal_has_int1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_int1(), target);
  }

  // optional int32 int2 = 10;
  if (_internal_has_int2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_int2(), target);
  }

  // optional int64 long1 = 11;
  if (_internal_has_long1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_long1(), target);
  }

  // optional int64 long2 = 12;
  if (_internal_has_long2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_long2(), target);
  }

  // optional float float1 = 13;
  if (_internal_has_float1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_float1(), target);
  }

  // optional float float2 = 14;
  if (_internal_has_float2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_float2(), target);
  }

  // optional double double1 = 15;
  if (_internal_has_double1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_double1(), target);
  }

  // optional double double2 = 16;
  if (_internal_has_double2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_double2(), target);
  }

  // optional string string1 = 17;
  if (_internal_has_string1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string1().data(), static_cast<int>(this->_internal_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.TestDataClass.string1");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_string1(), target);
  }

  // optional string string2 = 18;
  if (_internal_has_string2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string2().data(), static_cast<int>(this->_internal_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.TestDataClass.string2");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_string2(), target);
  }

  // repeated bool boolArray = 19;
  if (this->_internal_boolarray_size() > 0) {
    target = stream->WriteFixedPacked(19, _internal_boolarray(), target);
  }

  // repeated int32 intArray = 22;
  {
    int byte_size = _intarray_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          22, _internal_intarray(), byte_size, target);
    }
  }

  // repeated int64 longArray = 23;
  {
    int byte_size = _longarray_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          23, _internal_longarray(), byte_size, target);
    }
  }

  // repeated float floatArray = 24;
  if (this->_internal_floatarray_size() > 0) {
    target = stream->WriteFixedPacked(24, _internal_floatarray(), target);
  }

  // repeated double doubleArray = 25;
  if (this->_internal_doublearray_size() > 0) {
    target = stream->WriteFixedPacked(25, _internal_doublearray(), target);
  }

  // repeated string stringArray = 26;
  for (int i = 0, n = this->_internal_stringarray_size(); i < n; i++) {
    const auto& s = this->_internal_stringarray(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.TestDataClass.stringArray");
    target = stream->WriteString(26, s, target);
  }

  // repeated int32 nDimensions = 27;
  {
    int byte_size = _ndimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          27, _internal_ndimensions(), byte_size, target);
    }
  }

  // repeated bool boolNdimArray = 28;
  if (this->_internal_boolndimarray_size() > 0) {
    target = stream->WriteFixedPacked(28, _internal_boolndimarray(), target);
  }

  // repeated int32 intNdimArray = 31;
  {
    int byte_size = _intndimarray_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          31, _internal_intndimarray(), byte_size, target);
    }
  }

  // repeated int64 longNdimArray = 32;
  {
    int byte_size = _longndimarray_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          32, _internal_longndimarray(), byte_size, target);
    }
  }

  // repeated float floatNdimArray = 33;
  if (this->_internal_floatndimarray_size() > 0) {
    target = stream->WriteFixedPacked(33, _internal_floatndimarray(), target);
  }

  // repeated double doubleNdimArray = 34;
  if (this->_internal_doublendimarray_size() > 0) {
    target = stream->WriteFixedPacked(34, _internal_doublendimarray(), target);
  }

  // optional .protobuf.TestDataClass nestedData = 35;
  if (_internal_has_nesteddata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::nesteddata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.TestDataClass)
  return target;
}

size_t TestDataClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.TestDataClass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool boolArray = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_boolarray_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 intArray = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intarray_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intarray_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 longArray = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->longarray_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _longarray_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float floatArray = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatarray_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double doubleArray = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doublearray_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated string stringArray = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stringarray_.size());
  for (int i = 0, n = stringarray_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stringarray_.Get(i));
  }

  // repeated int32 nDimensions = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ndimensions_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ndimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool boolNdimArray = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_boolndimarray_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 intNdimArray = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intndimarray_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intndimarray_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 longNdimArray = 32;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->longndimarray_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _longndimarray_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float floatNdimArray = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatndimarray_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double doubleNdimArray = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_doublendimarray_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string1 = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string1());
    }

    // optional string string2 = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string2());
    }

    // optional .protobuf.TestDataClass nestedData = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nesteddata_);
    }

    // optional bool bool1 = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bool2 = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 int1 = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int1());
    }

    // optional int64 long1 = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_long1());
    }

    // optional int32 int2 = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int2());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float float1 = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 long2 = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_long2());
    }

    // optional double double1 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double double2 = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional float float2 = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDataClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.TestDataClass)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDataClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestDataClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.TestDataClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.TestDataClass)
    MergeFrom(*source);
  }
}

void TestDataClass::MergeFrom(const TestDataClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.TestDataClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boolarray_.MergeFrom(from.boolarray_);
  intarray_.MergeFrom(from.intarray_);
  longarray_.MergeFrom(from.longarray_);
  floatarray_.MergeFrom(from.floatarray_);
  doublearray_.MergeFrom(from.doublearray_);
  stringarray_.MergeFrom(from.stringarray_);
  ndimensions_.MergeFrom(from.ndimensions_);
  boolndimarray_.MergeFrom(from.boolndimarray_);
  intndimarray_.MergeFrom(from.intndimarray_);
  longndimarray_.MergeFrom(from.longndimarray_);
  floatndimarray_.MergeFrom(from.floatndimarray_);
  doublendimarray_.MergeFrom(from.doublendimarray_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string1(from._internal_string1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_string2(from._internal_string2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_nesteddata()->::protobuf::TestDataClass::MergeFrom(from._internal_nesteddata());
    }
    if (cached_has_bits & 0x00000008u) {
      bool1_ = from.bool1_;
    }
    if (cached_has_bits & 0x00000010u) {
      bool2_ = from.bool2_;
    }
    if (cached_has_bits & 0x00000020u) {
      int1_ = from.int1_;
    }
    if (cached_has_bits & 0x00000040u) {
      long1_ = from.long1_;
    }
    if (cached_has_bits & 0x00000080u) {
      int2_ = from.int2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      float1_ = from.float1_;
    }
    if (cached_has_bits & 0x00000200u) {
      long2_ = from.long2_;
    }
    if (cached_has_bits & 0x00000400u) {
      double1_ = from.double1_;
    }
    if (cached_has_bits & 0x00000800u) {
      double2_ = from.double2_;
    }
    if (cached_has_bits & 0x00001000u) {
      float2_ = from.float2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestDataClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.TestDataClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDataClass::CopyFrom(const TestDataClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.TestDataClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDataClass::IsInitialized() const {
  return true;
}

void TestDataClass::InternalSwap(TestDataClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boolarray_.InternalSwap(&other->boolarray_);
  intarray_.InternalSwap(&other->intarray_);
  longarray_.InternalSwap(&other->longarray_);
  floatarray_.InternalSwap(&other->floatarray_);
  doublearray_.InternalSwap(&other->doublearray_);
  stringarray_.InternalSwap(&other->stringarray_);
  ndimensions_.InternalSwap(&other->ndimensions_);
  boolndimarray_.InternalSwap(&other->boolndimarray_);
  intndimarray_.InternalSwap(&other->intndimarray_);
  longndimarray_.InternalSwap(&other->longndimarray_);
  floatndimarray_.InternalSwap(&other->floatndimarray_);
  doublendimarray_.InternalSwap(&other->doublendimarray_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string1_, GetArenaForAllocation(),
      &other->string1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string2_, GetArenaForAllocation(),
      &other->string2_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDataClass, float2_)
      + sizeof(TestDataClass::float2_)
      - PROTOBUF_FIELD_OFFSET(TestDataClass, nesteddata_)>(
          reinterpret_cast<char*>(&nesteddata_),
          reinterpret_cast<char*>(&other->nesteddata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDataClass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TestDataClass_2eproto_getter, &descriptor_table_TestDataClass_2eproto_once,
      file_level_metadata_TestDataClass_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::TestDataClass* Arena::CreateMaybeMessage< ::protobuf::TestDataClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::TestDataClass >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
